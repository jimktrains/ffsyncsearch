#!/usr/bin/env python3

from hkdf import hkdf_extract, hkdf_expand, Hkdf
import hashlib 
import hmac
from base64 import b64encode
from Crypto.Cipher import AES


# https://tools.ietf.org/html/rfc5869 Appendix A
## Test Case 1
Hash = hashlib.sha256
IKM  = bytes.fromhex('0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b')
salt = bytes.fromhex('000102030405060708090a0b0c')
info = bytes.fromhex('f0f1f2f3f4f5f6f7f8f9')
L    = 42

PRK  = bytes.fromhex('077709362c2e32df0ddc3f0dc47bba6390b6c73bb50f9c3122ec844ad7c2b3e5')
OKM  = bytes.fromhex('3cb25f25faacd57a90434f64d0362f2a2d2d0a90cf1a5a4c5db02d56ecc4c5bf34007208d5b887185865')

prk = hkdf_extract(salt=salt, input_key_material=IKM, hash=Hash)
print("RFC 5869 Test Case 1")
print("  PRK")
print("    Expected: " + PRK.hex())
print("    Computed: " + prk.hex())

okm = hkdf_expand(pseudo_random_key=prk, info=info, length=L, hash=Hash) 
print("  OKM")
print("    Expected: " + OKM.hex())
print("    Computed: " + okm.hex())
print()


# example from https://mozilla-services.readthedocs.io/en/latest/sync/storageformat5.html#record-encryption
print("record encryption (keys given)")
encryption_key = bytes.fromhex('d3af449d2dc4b432b8cb5b59d40c8a5fe53b584b16469f5b44828b756ffb6a81')
hmac_key       = bytes.fromhex('2c5d98092d500a048d09fd01090bd0d3a4861fc8ea2438bd74a8f43be6f47f02')
cleartext = "SECRET MESSAGE"

#iv = randomBytes(16)
iv = bytes.fromhex('375a12d6de4ef26b735f6fccfbafff2d')

def _pad(s):
    bs = 16
    return s + (bs - len(s) % bs) * chr(bs - len(s) % bs)

ciphertext = AES.new(key=encryption_key, mode=AES.MODE_CBC, IV=iv).encrypt(_pad(cleartext))
ciphertext_b64 = b64encode(ciphertext)
print("  ciphertext")
print("    expected: wcgqzENt5iXt9/7KPJ3rTA==")
print("    computed: " + ciphertext_b64.decode('ascii'))

hmac = hmac.new(key=hmac_key, msg=ciphertext_b64, digestmod=hashlib.sha256).digest()
print("  hmac")
print("    expected: b5d1479ae2019663d6572b8e8a734e5f06c1602a0cd0becb87ca81501a08fa55")
print("    computed: " + hmac.hex())
print()

# Example from https://mozilla-services.readthedocs.io/en/latest/sync/storageformat5.html#sync-key-bundle
#    The Sync Key Bundle is a key bundle derived from the Sync Key via SHA-256 HMAC-based HKDF (RFC 5869).
#
#    Remember that a key bundle consists of a 256 bit symmetric encryption key and a HMAC key.
#    
#    In pseudo-code:
#    
#    info = "identity.mozilla.com/picl/v1/oldsync"
#    
#    T(1) = HMAC-SHA256(sync_key, info + 0x01)
#    T(2) = HMAC-SHA256(sync_key, T(1) + info + 0x02)
#    
#    encryption_key = T(1)
#    hmac = T(2)
#    
#    Example:
#    
#    sync_key = \xc7\x1a\xa7\xcb\xd8\xb8\x2a\x8f\xf6\xed\xa5\x5c\x39\x47\x9f\xd2
#    info = "identity.mozilla.com/picl/v1/oldsync"
#    
#    # Perform HKDF Expansion (1)
#    encryption_key = HKDF-Expand(sync_key, info + "\x01", 32)
#      -> 0x8d0765430ea0d9dbd53c536c6c5c4cb639c093075ef2bd77cd30cf485138b905
#    
#    # Second round of HKDF
#    hmac = HKDF-Expand(sync_key, encryption_key + info + "\x02", 32)
#      -> 0xbf9e48ac50a2fcc400ae4d30a58dc6a83a7720c32f58c60fd9d02db16e406216
#    
#    NB1: The Sync Key is stored in Firefox Accounts. It is referred to as ‘kB’ in https://github.com/mozilla/fxa-auth-server/wiki/onepw-protocol#-fetching-sync-keys (kA is not used).
# modified by what's found in  mozilla-central/mobile/android/services/src/main/java/org/mozilla/gecko/background/fxa/FxAccountUtils.java
#    public static final String KW_VERSION_STRING = "identity.mozilla.com/picl/v1/";
#    public static byte[] KW(String name) {
#      return Utils.concatAll(
#          KW_VERSION_STRING.getBytes(StringUtils.UTF_8),
#          name.getBytes(StringUtils.UTF_8));
#    }
#    public static KeyBundle generateSyncKeyBundle(final byte[] kSync) throws InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException {
#      byte[] encryptionKey = new byte[32];
#      byte[] hmacKey = new byte[32];
#      System.arraycopy(kSync, 0*32, encryptionKey, 0, 1*32);
#      System.arraycopy(kSync, 1*32, hmacKey, 0, 1*32);
#      return new KeyBundle(encryptionKey, hmacKey);
#    }
#    public static byte[] deriveSyncKey(byte[] kB) throws UnsupportedEncodingException, InvalidKeyException, NoSuchAlgorithmException {
#      return HKDF.derive(kB, new byte[0], FxAccountUtils.KW("oldsync"), 2*32);
#    }
#
# This is being fixed. https://github.com/mozilla-services/docs/pull/81

sync_key = b'\xc7\x1a\xa7\xcb\xd8\xb8\x2a\x8f\xf6\xed\xa5\x5c\x39\x47\x9f\xd2'
info = "identity.mozilla.com/picl/v1/".encode('utf8') + "oldsync".encode('utf8')

# Perform HKDF Expansion (1)
print('sync-key-bundle key derivation (with extract)')
prk = hkdf_extract(salt=bytes([0]), input_key_material=sync_key, hash=hashlib.sha256)
key_bundle = hkdf_expand(pseudo_random_key=prk, info=info, length=64, hash=hashlib.sha256)
encryption_key = key_bundle[0:32]
hmac_key = key_bundle[32:]

print("PRK: " + prk.hex())
print('  Encryption Key')
print('    Expected: 8d0765430ea0d9dbd53c536c6c5c4cb639c093075ef2bd77cd30cf485138b905')
print('    Computed: ' + encryption_key.hex())
print()

print('  HMAC Key')
print('    Expected: bf9e48ac50a2fcc400ae4d30a58dc6a83a7720c32f58c60fd9d02db16e406216')
print('    Computed: ' + hmac_key.hex())
print()


# Output
# RFC 5869 Test Case 1
#   PRK
#     Expected: 077709362c2e32df0ddc3f0dc47bba6390b6c73bb50f9c3122ec844ad7c2b3e5
#     Computed: 077709362c2e32df0ddc3f0dc47bba6390b6c73bb50f9c3122ec844ad7c2b3e5
#   OKM
#     Expected: 3cb25f25faacd57a90434f64d0362f2a2d2d0a90cf1a5a4c5db02d56ecc4c5bf34007208d5b887185865
#     Computed: 3cb25f25faacd57a90434f64d0362f2a2d2d0a90cf1a5a4c5db02d56ecc4c5bf34007208d5b887185865
# 
# record encryption (keys given)
#   ciphertext
#     expected: wcgqzENt5iXt9/7KPJ3rTA==
#     computed: wcgqzENt5iXt9/7KPJ3rTA==
#   hmac
#     expected: b5d1479ae2019663d6572b8e8a734e5f06c1602a0cd0becb87ca81501a08fa55
#     computed: b5d1479ae2019663d6572b8e8a734e5f06c1602a0cd0becb87ca81501a08fa55
# 
# sync-key-bundle key derivation
#   Encryption Key
#     Expected: 8d0765430ea0d9dbd53c536c6c5c4cb639c093075ef2bd77cd30cf485138b905
#     Computed: 36ae05317f08eaa6f12c72633d6f9a1162cbbf9300a6728730db48643af73342
# 
#   HMAC Key
#     Expected: bf9e48ac50a2fcc400ae4d30a58dc6a83a7720c32f58c60fd9d02db16e406216
#     Computed: a65574d6685dbf65a735912d272ee1ebe98c867428fb54616deae7bb7bc23dcc
# sync-key-bundle key derivation (without extract)
#   Encryption Key
#     Expected: 8d0765430ea0d9dbd53c536c6c5c4cb639c093075ef2bd77cd30cf485138b905
#     Computed: fb9d4880ee4e9ded1b8a0fa3a422c4418abfff4c091534ec8d6dd6a6371243b2
# 
#   HMAC Key
#     Expected: bf9e48ac50a2fcc400ae4d30a58dc6a83a7720c32f58c60fd9d02db16e406216
#     Computed: 56f24faf1e21cb12b34aa38b4cb6ce25f629ba6075ebd6641ca358065fe13714
